// <auto-generated />
using DataRepository;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace RefactoringAndSmellsSaver.Migrations
{
    [DbContext(typeof(BadSmellMinerDbContext))]
    [Migration("20171030043153_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.0-rtm-26452");

            modelBuilder.Entity("BadSmellMiner.DomainModels.Commit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AuthorName");

                    b.Property<string>("BranchName");

                    b.Property<string>("CommitId");

                    b.Property<DateTime?>("DateTime");

                    b.Property<string>("FullMessage");

                    b.Property<long>("ProjectId");

                    b.Property<string>("ShortMessage");

                    b.HasKey("Id");

                    b.HasIndex("AuthorName");

                    b.HasIndex("CommitId");

                    b.HasIndex("ProjectId");

                    b.ToTable("Commits");
                });

            modelBuilder.Entity("BadSmellMiner.DomainModels.OrganicClass", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("CommitId");

                    b.Property<string>("FullyQualifiedName");

                    b.Property<long?>("MetricsValuesId");

                    b.HasKey("Id");

                    b.HasIndex("CommitId");

                    b.HasIndex("FullyQualifiedName");

                    b.HasIndex("MetricsValuesId");

                    b.ToTable("OrganicClasses");
                });

            modelBuilder.Entity("BadSmellMiner.DomainModels.OrganicMethod", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("FullyQualifiedName");

                    b.Property<long?>("MetricsValuesId");

                    b.Property<long>("OrganicClassId");

                    b.HasKey("Id");

                    b.HasIndex("FullyQualifiedName");

                    b.HasIndex("MetricsValuesId");

                    b.HasIndex("OrganicClassId");

                    b.ToTable("OrganicMethods");
                });

            modelBuilder.Entity("BadSmellMiner.DomainModels.OrganicMetrics", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double?>("CyclomaticComplexity");

                    b.Property<double?>("LocalityRatio");

                    b.Property<double?>("MaxCallChain");

                    b.Property<double?>("MethodLinesOfCode");

                    b.Property<double?>("ParameterCount");

                    b.HasKey("Id");

                    b.ToTable("OrganicMetrics");
                });

            modelBuilder.Entity("BadSmellMiner.DomainModels.OrganicSmell", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<long?>("OrganicClassId");

                    b.Property<long?>("OrganicMethodId");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.HasIndex("OrganicClassId");

                    b.HasIndex("OrganicMethodId");

                    b.ToTable("OrganicSmell");
                });

            modelBuilder.Entity("BadSmellMiner.DomainModels.Project", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("BadSmellMiner.DomainModels.Refactoring", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CommitId");

                    b.Property<string>("SourceAttributeName");

                    b.Property<string>("SourceClassName");

                    b.Property<string>("SourceClassPackageName");

                    b.Property<string>("SourceClassPath");

                    b.Property<string>("SourceOperatationName");

                    b.Property<string>("TargetClassName");

                    b.Property<string>("TargetClassPackageName");

                    b.Property<string>("TargetClassPath");

                    b.Property<string>("TargetOperatationName");

                    b.Property<string>("Type");

                    b.HasKey("Id");

                    b.HasIndex("CommitId");

                    b.HasIndex("Type");

                    b.ToTable("Refactorings");
                });

            modelBuilder.Entity("BadSmellMiner.DomainModels.Commit", b =>
                {
                    b.HasOne("BadSmellMiner.DomainModels.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BadSmellMiner.DomainModels.OrganicClass", b =>
                {
                    b.HasOne("BadSmellMiner.DomainModels.Commit", "Commit")
                        .WithMany("Classes")
                        .HasForeignKey("CommitId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BadSmellMiner.DomainModels.OrganicMetrics", "MetricsValues")
                        .WithMany()
                        .HasForeignKey("MetricsValuesId");
                });

            modelBuilder.Entity("BadSmellMiner.DomainModels.OrganicMethod", b =>
                {
                    b.HasOne("BadSmellMiner.DomainModels.OrganicMetrics", "MetricsValues")
                        .WithMany()
                        .HasForeignKey("MetricsValuesId");

                    b.HasOne("BadSmellMiner.DomainModels.OrganicClass", "OrganicClass")
                        .WithMany("Methods")
                        .HasForeignKey("OrganicClassId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BadSmellMiner.DomainModels.OrganicSmell", b =>
                {
                    b.HasOne("BadSmellMiner.DomainModels.OrganicClass")
                        .WithMany("Smells")
                        .HasForeignKey("OrganicClassId");

                    b.HasOne("BadSmellMiner.DomainModels.OrganicMethod")
                        .WithMany("Smells")
                        .HasForeignKey("OrganicMethodId");
                });
#pragma warning restore 612, 618
        }
    }
}
